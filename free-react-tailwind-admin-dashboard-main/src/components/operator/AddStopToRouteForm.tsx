import React, { useState } from 'react';
import useRoute  from '../../hooks/useRoute';
import { RouteStop } from '../../api/routeService';
import Input from '../form/input/InputField';
import Button from '../ui/button/Button';
import Alert from '../ui/alert/Alert';
import LocationPickerMap from './LocationPickerMap';

interface AddStopToRouteFormProps {
  routeId: string;
  onClose: () => void;
  onSuccess: (newStop: RouteStop) => void;
}

const AddStopToRouteForm: React.FC<AddStopToRouteFormProps> = ({
  routeId,
  onClose,
  onSuccess
}) => {
  // Form state
  const [stopName, setStopName] = useState('');
  const [travelTime, setTravelTime] = useState('');
  const [timetable, setTimetable] = useState<string[]>([]);
  const [tempTime, setTempTime] = useState('');
  const [selectedLocation, setSelectedLocation] = useState<{ lat: number | null, lng: number | null }>({
    lat: null,
    lng: null
  });
  const [landmarkDescription, setLandmarkDescription] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Get addRouteStop function from context
  const { addRouteStop } = useRoute();
  
  // Add time to the timetable
  // const handleAddTime = () => {
  //   if (tempTime && !timetable.includes(tempTime)) {
  //     setTimetable([...timetable, tempTime]);
  //     setTempTime('');
  //   }
  // };
  
  // Remove time from the timetable
  const handleRemoveTime = (timeToRemove: string) => {
    setTimetable(timetable.filter(time => time !== timeToRemove));
  };
  
  // Handle location selection from the map
  const handleLocationChange = (coords: { lat: number, lng: number }) => {
    setSelectedLocation(coords);
  };
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate form inputs
    if (!stopName.trim()) {
      setError('Stop name is required');
      return;
    }
    
    if (travelTime === '') {
      setError('Travel time is required');
      return;
    }
    
    if (!selectedLocation.lat || !selectedLocation.lng) {
      setError('Please select a location on the map');
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Prepare the data for the API
      const newStopData: RouteStop = {
        id: '', // Will be generated by backend
        name: stopName,
        latitude: selectedLocation.lat,
        longitude: selectedLocation.lng,
        stop_order: 0, // Will be set by backend
        timetable: timetable,
        travel_time: typeof travelTime === 'number' ? travelTime : parseInt(travelTime || '0'),
        landmark_description: landmarkDescription,
      };
      
      // Call API through context
      const result = await addRouteStop(routeId, newStopData);
      
      if (result) {
        console.log(result);
        // Call onSuccess callback with the new stop data
        onSuccess(result.data as RouteStop);
        onClose();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-5 pt-100">
      <h2 className="text-xl font-semibold">Add New Stop</h2>
      
      {error && <Alert variant="error" title="Error" message={error} />}
      
      <div className="mt-5">
        <label htmlFor="stopName" className="block text-sm font-medium text-gray-700 mb-2">
          Stop Name*
        </label>
        <Input
          id="stopName"
          type="text"
          value={stopName}
          onChange={(e) => setStopName(e.target.value)}
          placeholder="Enter stop name"
          // required
        />
      </div>
      
      <div className="mt-5">
        <label htmlFor="landmarkDescription" className="block text-sm font-medium text-gray-700 mb-2">
          Landmark Description
        </label>
        <Input
          id="landmarkDescription"
          type="text"
          value={landmarkDescription}
          onChange={(e) => setLandmarkDescription(e.target.value)}
          placeholder="E.g. Next to City Mall"
        />
      </div>
      
      <div className="mt-5">
        <label htmlFor="travelTime" className="block text-sm font-medium text-gray-700 mb-2">
          Travel Time (minutes)*
        </label>
        <Input
          id="travelTime"
          type="text"
          value={travelTime}
          onChange={(e) => {
            setTravelTime(e.target.value);
          }}
          placeholder="Time from previous stop"
          // required
        />
        <p className="text-xs text-gray-500 mt-2">
          Estimated time to reach this stop from the previous stop
        </p>
      </div>
      
      <div className="mt-5">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Timetable
        </label>
        <div className="flex items-center gap-3">
          <Input
            type="time"
            value={tempTime}
            onChange={(e) => {
              console.log("Time changed:", e.target.value);
              setTempTime(e.target.value);
            }}
            className="w-32"
          />
          <Button
            type="button"
            variant="outline"
            onClick={() => {
              console.log("Add Time clicked, current value:", tempTime);
              if (tempTime) {
                if (!timetable.includes(tempTime)) {
                  setTimetable([...timetable, tempTime]);
                }
                setTempTime('');
              }
            }}
            size="sm"
          >
            Add Time
          </Button>
        </div>
        
        {/* Display added times */}
        {timetable.length > 0 && (
          <div className="mt-3 flex flex-wrap gap-3">
            {timetable.map((time, index) => (
              <div 
                key={index} 
                className="px-3 py-1.5 bg-gray-100 rounded-full flex items-center text-sm"
              >
                {time}
                <button
                  type="button"
                  className="ml-2 text-gray-500 hover:text-red-500"
                  onClick={() => handleRemoveTime(time)}
                >
                  &times;
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
      
      <div className="mt-5">
        <label className="block text-sm font-medium text-gray-700 mb-3">
          Location*
        </label>
        <LocationPickerMap
          initialCenter={[-1.2921, 36.8219]} // Nairobi coordinates as example
          initialZoom={12}
          onLocationChange={handleLocationChange}
          height="300px"
        />
        <p className="text-xs text-gray-500 mt-2">
          Click on the map to select a location or drag the marker
        </p>
      </div>
      
      <div className="flex justify-end gap-3 pt-5">
        <Button
          type="button"
          variant="outline"
          onClick={onClose}
          disabled={isLoading}
          className="px-5 py-2.5"
        >
          Cancel
        </Button>
        <Button
          type="submit"
          variant="primary"
        //   isLoading={isLoading}
          disabled={isLoading}
          className="px-5 py-2.5"
        >
          Add Stop
        </Button>
      </div>
    </form>
  );
};

export default AddStopToRouteForm;